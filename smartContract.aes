contract LandRegistration =
  
    
  record landDetails = 
    {
    id : int,
    name : string,
    creatorAddress : address,
    image1 : string,
    image2 : string,
    description : string,
    price : int,
    timestamp : int
    }
    
  record state = {
    lands : map(int, landDetails),
    landLength : int}
    
  entrypoint init() = { 
    lands = {},
    landLength = 0}

  
  entrypoint getLand(index : int) = 
    switch(Map.lookup(index, state.lands))
      None => abort("Land does not exist with this index")
      Some(x) => x  
    
    
    //Registers a Land
    
  payable stateful entrypoint createLand( image1' : string, image2' : string, name' : string, description' : string, price' : int) = 
    let timestamp = Chain.timestamp
    let landReg = {
      id = getLandLength()+1,
      name = name', 
      creatorAddress  = Call.caller,
      image1 = image1',
      image2 = image2',
      
      description = description',
      price= price',
      timestamp = timestamp}
    
    let index = getLandLength() + 1
    put(state{lands[index] = landReg, landLength = index})
    
    
    //returns lenght of lands registered
  entrypoint getLandLength() : int = 
    state.landLength
    
  //price of land
    
  entrypoint getPrice(index : int) = 
    state.lands[index].price
    
    
    
  entrypoint getId(index : int) = 
      state.lands[index].id
      
